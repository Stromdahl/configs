# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=
HISTFILESIZE=

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

# Prompt colors and special ansi codes
RED="\[\033[91m\]"
GREEN="\[\033[92m\]"
YELLOW="\[\033[93m\]"
BLUE="\[\033[94m\]"
PURPLE="\[\033[95m\]"
CYAN="\[\033[96m\]"
GRAY="\[\033[37m\]"

BELL="\[\a\]"
RESET="\[\033[0m\]"
BOLD="\[\033[1m\]"

# Add returnvalue if command return != 0
returnvalue() {
  ret=$?
  if [ $ret -ne 0 ]; then
    echo "[$ret] "
  fi
}

host_prompt() {
  if [ -n "$SSH_CLIENT" ]; then
    echo "$GREEN\u@\h "
  fi
}

PROMPT_DIRTRIM=3
if [ "$color_prompt" = yes ]; then
  # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]$(__git_ps1 "(%s)\[\033[00m\]:")\[\033[01;34m\]\w\[\033[00m\]\n\$ '
  PS1="$BELL$BOLD$RED\$(returnvalue)$RESET$CYAN\# $(host_prompt)$BLUE\w$YELLOW\$(__git_ps1) \n$GRAY\$ $RESET"
  else
    PS1='$BLUE${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
  xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
  *)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Set EDITOR depending to nvim or vim
if command -v nvim &> /dev/null
then
  export EDITOR=nvim
else
  export EDITOR=vim
fi

function mkcd () {
  dirname=$1
  mkdir $dirname
  cd $dirname
}

# ===1 Aliases
# ==============================================
function cdgr() {
  inside_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
  if [ "$inside_git_repo" ]; then
    cd $(git rev-parse --show-toplevel)
  fi
}

alias cl='clear'
alias cp='cp -iv'
alias l='ls -CF'
alias la='ll -A'
alias lc='cl && ll'
alias ll='ls -hltF --time-style=long-iso --group-directories-first'
alias mkdir='mkdir -pv'
alias mv='mv -iv'
alias rm='rm -iv'
alias vi='${EDITOR}'
alias ncal='ncal -wM3'

alias gs='git status --short'
alias gsi='git status --short --ignored'
alias :q='exit'
# cd up dir
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Aliases for xclip
alias xci='xclip -in -selection clipboard'
alias xco='xclip -out -selection clipboard'
alias xcpi='xclip -in'
alias xcpo='xclip -out'
alias k='kubectl'

alias publicip='curl -s http://ifconfig.me/all.json | jq -r .ip_addr'

alias pubkey='cat $HOME/.ssh/id_ed25519.pub';

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

function mudhead() {
  curl -s http://mudhead.se/lt.json | jq ".$(date +%a | awk '{print tolower($0)}')" | jq -rj '.[] | "\n-- ", .name, " --\n\t", (.menu | join("\n\t")), "\n"'
}

# ######
# DOCKER
# ######

function find_container(){
  local __id=$2
  local hits=`docker ps -a --format "{{.ID}} {{.Image}} {{.Names}}" | grep $1`
  SAVEIFS=$IFS
  IFS=$'\n'
  local hits=($hits)
  IFS=$SAVEIFS

  local amountHits=${#hits[@]}
  if [ $amountHits == 0 ]; then
    echo "Found no matches!"
    unset id
    return
  fi
  if [ $amountHits -gt 1 ]; then
    local i
    for ((i=0; i<amountHits; i++)); do
      echo "$(($i+1))) ${hits[$i]}"
    done
    read -n 1 -s -r -p "Found multiple matches, please enter your choice:`echo $'\n> '`" REPLY
    echo $REPLY
    if [[ "$REPLY" -lt 1 || "$REPLY" -gt $amountHits ]]; then
      REPLY=1
    fi
    find_container_hit=`echo "${hits[$REPLY - 1]}" | sed -e 's/ /   /g'`
  else
    find_container_hit=`echo "$hits" | head -n1 | sed -e 's/ /   /g'`
  fi
  local __cid=`echo $find_container_hit | awk '{print $1}'`
  eval $__id="'$__cid'"
}

# Docker inspect IP
function dip(){
  find_container $1 id
  if [[ $id ]]; then
    docker inspect --format='{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $id | sed -e "s/<no value>//g"
  fi
}

# Docker restart
function drs(){
  loop find_container "$*" id "Restarting"
  if [[ $ids ]]; then
    docker restart $ids
  fi
}

# Docker shell
function dsh(){
  find_container $1 id
  if [[ $id ]]; then
    echo ">>>   $find_container_hit"
    docker exec -it -e COLUMNS=$COLUMNS -e LINES=$LINES -e TERM=$TERM $id bash
  fi
}

# change man display to unhyphenated and ragged-right
MANOPT="--nh --nj"

genpasswd() {
	local l=$1
       	[ "$l" == "" ] && l=20
      	tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}

# make less use colors, i. e. in man
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

export PATH="$HOME/bin:$PATH"
export PATH=$PATH:/sbin

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# cargo
if [ -f $HOME/.cargo/env ]; then
  . "$HOME/.cargo/env"
fi

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

alias to=". $HOME/dev/bash/to/to.sh"

if [ ! -S ~/.ssh/ssh_auth_sock ]; then
  eval `ssh-agent -t 3600` > /dev/null 2>&1
  ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock

# WORK

function ys() {
  y_start --profile dev/$1
}

# Yggio
if [ -f $HOME/sensative/yggio/tools/dev-scripts/yggiorc.sh ]; then
  source $HOME/sensative/yggio/tools/dev-scripts/yggiorc.sh
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

#[ -f "/home/ms/.ghcup/env" ] && source "/home/ms/.ghcup/env" # ghcup-env
[ -f "/home/ms/.ghcup/env" ] && source "/home/ms/.ghcup/env" # ghcup-env
